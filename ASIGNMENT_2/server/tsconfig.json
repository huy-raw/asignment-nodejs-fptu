{
    "ts-node": {
        // Do not forget to `npm i -D tsconfig-paths`
        "require": [
            "tsconfig-paths/register"
        ]
    },
    "compilerOptions": {
        "experimentalDecorators": true,
        "target": "es2017", /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
        "module": "CommonJS", /* Specify what module code is generated. */
        "rootDir": "./src", /* Specify the root folder within your source files. */
        "moduleResolution": "node", /* Specify how TypeScript looks up a file from a given module specifier. */
        "baseUrl": "./src", /* Specify the base directory to resolve non-relative module names. */
        "paths": {
            "@/*": [
                "*"
            ],
        }, /* Specify a set of entries that re-map imports to additional lookup locations. */
        "resolveJsonModule": true, 
        "sourceMap": true, /* Create source map files for emitted JavaScript files. */
        // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If `declaration` is true, also designates a file that bundles all .d.ts output. */
        "outDir": "./build", /* Specify an output folder for all emitted files. */
        "removeComments": false, /* Disable emitting comments. */
        "noEmitOnError": true, /* Disable emitting files if any type checking errors are reported. */
        "esModuleInterop": true, /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */
        // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
        "forceConsistentCasingInFileNames": true, /* Ensure that casing is correct in imports. */
        /* Type Checking */
        "strict": true, /* Enable all strict type-checking options. */
        "noImplicitAny": true, /* Enable error reporting for expressions and declarations with an implied `any` type.. */
        "strictNullChecks": true, /* When type checking, take into account `null` and `undefined`. */
        "strictFunctionTypes": true, /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
        "strictBindCallApply": true, /* Check that the arguments for `bind`, `call`, and `apply` methods match the original function. */
        "strictPropertyInitialization": true, /* Check for class properties that are declared but not set in the constructor. */
        "noImplicitThis": true, /* Enable error reporting when `this` is given the type `any`. */
        "useUnknownInCatchVariables": true, /* Type catch clause variables as 'unknown' instead of 'any'. */
        "alwaysStrict": true, /* Ensure 'use strict' is always emitted. */
        "exactOptionalPropertyTypes": true, /* Interpret optional property types as written, rather than adding 'undefined'. */
        "noImplicitReturns": true, /* Enable error reporting for codepaths that do not explicitly return in a function. */
        "noFallthroughCasesInSwitch": true, /* Enable error reporting for fallthrough cases in switch statements. */
        "noUncheckedIndexedAccess": true, /* Include 'undefined' in index signature results */
        "noImplicitOverride": true, /* Ensure overriding members in derived classes are marked with an override modifier. */
        "noPropertyAccessFromIndexSignature": true, /* Enforces using indexed accessors for keys declared using an indexed type */
        "allowUnusedLabels": true, /* Disable error reporting for unused labels. */
        "allowUnreachableCode": true, /* Disable error reporting for unreachable code. */
        "skipLibCheck": true /* Skip type checking all .d.ts files. */
    },
    "include": [
        "src/**/*.ts",
        "src/**/*.d.ts",
        "src/**/*.tsx",
        "src/**/*.vue"
    ],
    "exclude": [
        "node_modules"
    ],
}